plugins {
  id "mpern.sap.commerce.build" version "1.0.0"
  id "mpern.sap.commerce.ccv1.package" version "1.0.0"
}
//to avoid FQN in your task definitions, import the custom task classes
import mpern.sap.commerce.build.tasks.HybrisAntTask

repositories {
    //your company maven repository
     maven {
         url 'https://repository.company.com/hybris-release'
     }
    //for DB drivers
    jcenter()
}

version = "1.0.0-SNAPSHOT"

hybris {
    version = "6.6.0.0"
}
CCV1 {
    //let's define en extra 'qa' environment
    environments = ['dev', 'qa', 'stag', 'prod']
    datahub = true
    //since this is just a demo, let's configure a dummy datahub file
    datahubWar = file("my-custom-datahub.war")
}

dependencies {
    //db drivers defined here are automatically downloaded and configured during bootstrapPlatform
    dbDriver "mysql:mysql-connector-java:5.1.45"
}

//Examaple for a local setup:

//treat the hybris/config folder (mostly) like an external dependency
//1. load environment specific configs from hybris.optional.config.dir
task configureOptionalConfigDir {
    dependsOn "bootstrapPlatform", "createDefaultConfig"

    def localProperties = file('hybris/config/local.properties')
    onlyIf {
        !localProperties.text.contains("hybris.optional.config.dir")
    }
    doLast {
         localProperties << """
            #GENERATED by gradle
            hybris.optional.config.dir=${project.file('config/own-config')}
            #GENERATED
            """.stripIndent()
    }
}
//2. only keep modified files in git, and copy them over the out-of-the-box config
task copyCustomConfig(type: Copy) {
    group "Setup"
    description "Copy modified files over the standard hybris config folder"
    dependsOn "bootstrapPlatform", "createDefaultConfig"

    from file("config/config-customization/")
    into file("hybris/config/")
}

//little helper task to generate a new developer config
task createBootstrapDevConfig(type: WriteProperties) {
    def developerProperties = file("config/own-config/99-local.properties")
    
    onlyIf {
        !developerProperties.exists()
    }

    outputFile developerProperties
    
    comment "Generated developer properties, feel free to change"
    
    property "db.url", "jdbc:mysql://localhost:3306/${project.name}?useConfigs=maxPerformance&characterEncoding=utf8&useSSL=false"
    property "db.driver", "com.mysql.jdbc.Driver"
    property "db.username", "<CHANGE_ME>"
    property "db.password", "<CHANGE_ME>"
}

task setupDev {
    group "Setup"
    description "Create a new Developer Setup from scratch"

    dependsOn "copyCustomConfig", "configureOptionalConfigDir", "createBootstrapDevConfig"
}

//the plugin also provides a custom task type to run hybris ant targets
//here an example to run unit tests
task unitTests(type: HybrisAntTask) {
    args("unittests")
    systemProperty("testclasses.extensions", "training")
    //do NOT start hybris for unit tests, works for 6.4+
    systemProperty("testclasses.suppress.junit.tenant", "true")
    //we can also call other ant targets by prefexing the target name with `y`
    //because the plugin defines a task rule (check the output of './gradlew tasks')
    dependsOn tasks.getByPath("ybuild")
}
//you can also call any other hybris ant target on the command line with `./gradlew y<target>`

task rebuildAndPackage {
    group "Distribution"
    description "Rebuild platform and create a new hybris cloud services package"
    dependsOn "yclean", "ybuild", "yproduction", "buildCCV1Package" 
}
